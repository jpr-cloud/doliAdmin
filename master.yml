---
- name: Configuración inicial del servidor master
  hosts: all
  become: true

  vars:
    # variables del servidor master
    hostname_main: "master.j-cloud.com.mx"
    user_login: "myunixlogin"
    user_shell: "/bin/bash"
    sshd_config_path: "/etc/ssh/sshd_config"
    sellyoursaas_conf: "/etc/ssh/sshd_config.d/sellyoursaas.conf"
    user_sysadmin: "jpyrsaadmin"
    user_sysadmin_password: "p123p123"
    superadmin: "admin"
    superadmin_password: "p123p123"

  ## Variables para la configuración de los nombres de dominio y correo electrónico

    domain: "j-cloud.com.mx"
    ServerName: "master.{{ domain }}"
    AdminServerName: "admin.{{ domain }}"
    MyAccountServerName: "myaccount.{{ domain }}"
    subdomain: "withX"
    emailfrom: "soporte@jpyrsa.mx"
    emailsupervision: "soporte@jpyrsa.mx"


    ## Variables para clonear Dolibarr y SellYourSaas
    dolibarr_branch: "22.0" ## 22.0
    dolibarr_git_repo: "https://github.com/Dolibarr/dolibarr.git"
    dolibarr_sellyoursaas_git_repo: "https://github.com/dolicloud/sellyoursaas.git"

    
    ## Variable para la configuración de la base de datos
    databasehost: "localhost"  # Cambiar si es necesario
    databaseport: 3306
    database: "sellyoursaas"
    databaseuser: "sellyoursaas_user"
    databasepass: "p123p123"

    ## Configuración de la copia de seguridad remota
    remotebackupserver: "ip.of.remote.backup.ssh.server"
    remotebackupuser: "admin"
    remotebackupdir: "/mnt/diskbackup"

    packages:
      # Herramientas y utilidades básicas
      - mc
      - git
      - systemd-timesyncd
      - gzip
      - zip
      - zstd
      - memcached
      - ncdu
      - duc
      - iotop
      - acl
      - mariadb-server
      - mariadb-client
      - apache2
      - apache2-bin
      - lynx
      - php
      - php-cli
      - libapache2-mod-php
      - php-fpm
      - php-gd
      - php-imap
      - php-json
      - php-ldap
      - php-mysql
      - php-curl
      - php-memcached
      - php-imagick
      - php-intl
      - php-xml
      - php-zip
      - php-bz2
      - php-ssh2
      - php-mbstring
      - php-dev
      - php-soap
      - php-tidy
      - libmcrypt-dev
      - php-readline
      - php-xmlrpc
      - php-pear
      - ghostscript
      - watchdog
      - cpulimit
      - libapache2-mpm-itk
      - libapache2-mod-apparmor
      - apparmor
      - apparmor-profiles
      - apparmor-utils
      - rkhunter
      - chkrootkit
      - bind9
      - spamc
      - spamassassin
      - clamav
      - clamav-daemon
      - fail2ban
      - libreoffice-common
      - libreoffice-writer
      - mailutils
      - postfix
      - certbot

  tasks:
    # En primer lugar, actualizamos los repositorios y paquetes
    - name: Actualizando los repositorios
      apt:
        update_cache: yes
    - name: Instalando los paquetes necesarios
      apt:
        name: "{{ packages }}"
        state: present
    # Conbfiguraciones del sistema iniciales
    - name: Estableciendo hostname {{ hostname_main }}
      hostname:
        name: "{{ hostname_main }}"
    - name: Configurando /etc/sysctl.conf
      blockinfile:
        path: /etc/sysctl.conf
        block: |
          vm.vfs_cache_pressure=50
        marker: "# {mark} ANSIBLE MANAGED BLOCK manager and managed nodes" 
    - name: Crear grupo admin
      group:
        name: admin
        state: present
    - name: Agregando al usuario "{{ user_login }}"
      user:
        name: "{{ user_login }}"
        shell: "{{ user_shell }}"
        groups: sudo
    - name: Modificando el shell predeterminado para usar bash (en lugar de dh, sh o dash)
      file:
        src: "{{ user_shell }}"
        dest: "/usr/bin/sh"
        state: link
        force: yes
    - name: Longitud mínima de la contraseña mínimo de 8 caracteres
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: 'password        \[success=1 default=ignore\]      pam_unix\.so obscure yescrypt'
        line: 'password        [success=1 default=ignore]      pam_unix.so obscure yescrypt minlen=8'
    - name: Agregando al administrador del sistema {{ jpyrsaadmin }} con sus respectivas claves
      ansible.builtin.user:
        name: "{{ user_sysadmin }}"
        password: "{{ user_sysadmin_password | password_hash('sha512') }}"
        # Create a 2048-bit SSH key for user jsmith in ~{{jpyrsaadmin}}/.ssh/id_rsa
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
    - name: Creando el archivo /etc/sudoers.d/{{ user_sysadmin }}
      copy:
        dest: "/etc/sudoers.d/{{ user_sysadmin }}"
        content: |
          {{ user_sysadmin }} ALL=(ALL) ALL
          {{ user_sysadmin }} ALL=(ALL) /usr/bin/su - admin
          {{ user_sysadmin }} ALL=(ALL) /usr/bin/su - osu*
        owner: root
        group: root
        mode: '0440'
        #    miapellidonombre TODOS=(TODOS) TODOS
        # También puedes agregar estas líneas para evitar que el usuario vuelva a ingresar una contraseña al cambiar a 'admin' o 'osu*'
        # Esto permite cambiar a admin u osu* con "sudo su - admin" o "sudo su - osu..."
        #miapellidonombreALL=(ALL) /usr/bin/su - admin
        #miapellidonombreALL=(ALL) /usr/bin/su - osu*
    - name: Ajustar permisos de sshd_config
      file:
        path: "{{ sshd_config_path }}"
        mode: '0600'
    - name: Crear archivo adicional de configuración SSH
      copy:
        dest: "{{ sellyoursaas_conf }}"
        content: |
          # Configuración adicional para SellYourSaas
          AllowUsers {{ user_login }} root {{ user_sysadmin }}
          PermitRootLogin yes
          PasswordAuthentication yes
        owner: root
        group: root
        mode: '0644'
    - name: Crear entrada sudo personalizada para {{ user_login }}
      copy:
        dest: "/etc/sudoers.d{{ user_login }}"
        content: "{{ user_login }} ALL=(ALL) NOPASSWD:ALL"
        owner: root
        group: root
        mode: '0440'
    - name: Establecer contraseña de root
      user:
        name: root
        password: "{{ 'p123p123' | password_hash('sha512') }}"
    - name: Agregando al superadmin {{ superadmin }} con sus respectivas claves
      ansible.builtin.user:
        name: "{{ superadmin }}"
        password: "{{ superadmin_password | password_hash('sha512') }}"
        group: '{{ superadmin }}'
        # Create a 2048-bit SSH key for user jsmith in ~{{jpyrsaadmin}}/.ssh/id_rsa
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
## Creando directorios de trabajo generales
    - name: Creando directorios de trabajo generales
      debug:
        msg: "Creando directorios de trabajo generales"
    - name: Creaando el directorio de trabajo /home/{{ superadmin }}/logs
      ansible.builtin.file:
        path: /home/{{ superadmin }}/logs
        state: directory
        mode: '770'
        owner: root
        group: '{{ superadmin }}'
    - name: Creaando el directorio de trabajo /home/{{ superadmin }}/backup/conf
      ansible.builtin.file:
        path: /home/{{ superadmin }}/backup/conf
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: '{{ superadmin }}'
        recurse: yes
    - name: Creaando el directorio de trabajo /home/{{ superadmin }}/backup/mysql
      ansible.builtin.file:
        path: /home/{{ superadmin }}/backup/mysql
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: '{{ superadmin }}'
        recurse: yes
    - name: Creaando el directorio de trabajo /home/{{ superadmin }}/wwwroot
      ansible.builtin.file:
        path: /home/{{ superadmin }}/wwwroot
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: '{{ superadmin }}'
        recurse: yes
    - name: Creaando el directorio de trabajo /mnt/diskbackup/backup
      ansible.builtin.file:
        path: /mnt/diskbackup/backup
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: root
        recurse: yes
    - name: Creaando el directorio de trabajo /mnt/diskhome
      ansible.builtin.file:
        path: /mnt/diskhome
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: '{{ superadmin }}'
    - name: Creaando el directorio de trabajo /home/jail
      ansible.builtin.file:
        path: /home/jail
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: '{{ superadmin }}'
    - name: Creaando el directorio de trabajo /mnt/diskhome/home
      ansible.builtin.file:
        path: /mnt/diskhome/home
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: '{{ superadmin }}'
    - name: Creaando el directorio de trabajo /mnt/diskbackup/archives-test
      ansible.builtin.file:
        path: /mnt/diskbackup/archives-test
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: root
    - name: Creaando el directorio de trabajo /mnt/diskbackup/archives-paid
      ansible.builtin.file:
        path: /mnt/diskbackup/archives-paid
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: root
    - name: Creaando el directorio de trabajo /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam
      ansible.builtin.file:
        path: /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam
        state: directory
        mode: '0755'
        owner: '{{ superadmin }}'
        group: '{{ superadmin }}'
        recurse: yes
## Creando enlaces simbólicos
    - name: Creando enlaces simbólicos
      debug:
        msg: "Creando enlaces simbólicos"
    - name: Creando enlace simbólico /mnt/diskhome/home -> /home/jail/home
      ansible.builtin.file:
        src: /mnt/diskhome/home
        dest: /home/jail/home
        state: link
    - name: Creando enlace simbólico /mnt/diskbackup/backup -> /home/jail/backup
      ansible.builtin.file:
        src: /mnt/diskbackup/backup
        dest: /home/jail/backup
        state: link
    - name: Creando enlace simbólico /mnt/diskbackup/archives-test /home/jail/archives-test
      ansible.builtin.file:
        src: /mnt/diskbackup/archives-test
        dest: /home/jail/archives-test
        state: link
    - name: Creando enlace simbólico /mnt/diskbackup/archives-paid /home/jail/archives-paid
      ansible.builtin.file:
        src: /mnt/diskbackup/archives-paid
        dest: /home/jail/archives-paid
        state: link
## Configuraciones adicionales
    - name: Configurando /etc/sudoers
      blockinfile:
        path: /etc/sysctl.conf
        block: |
          Defaults set_home
          Defaults use_pty
        marker: "# {mark} ANSIBLE MANAGED BLOCK" 
## Eliminando archivos de información al iniciar sesión
    - name: Eliminando archivos de información al iniciar sesión
      debug:
        msg: "Eliminando archivos de información al iniciar sesión"
    - name: Eliminando /etc/update-motd.d/00-header
      file:
        path: /etc/update-motd.d/00-header
        state: absent
    - name: Eliminando /etc/update-motd.d/20-runabove
      file:
        path: /etc/update-motd.d/20-runabove
        state: absent
    - name: Eliminando /etc/update-motd.d/50-landscape-sysinfo
      file:
        path: /etc/update-motd.d/50-landscape-sysinfo
        state: absent
    - name: Eliminando /etc/update-motd.d/50-motd-news
      file:
        path: /etc/update-motd.d/50-motd-news
        state: absent
    - name: Eliminando /etc/update-motd.d/9*-update*-available
      file:
        path: /etc/update-motd.d/9*-update*-available
        state: absent
    - name: Eliminando /etc/update-motd.d/92-unattended-upgrades
      file:
        path: /etc/update-motd.d/92-unattended-upgrades
        state: absent
    - name: Configurando /etc/bash.bashrc
      blockinfile:
        path: /etc/bash.bashrc
        block: |
          alias psld='ps -fax -eo user:12,pid,ppid,pcpu,pmem,vsz:12,size:12,tty,start_time:6,utime,time,context,cmd'
          alias ip='ip -c=auto'
          HISTIGNORE='-*'
        marker: "# {mark} ANSIBLE MANAGED BLOCK manager and managed nodes" 
## Clonando Dolibarr
    - name: Configurando Git safe directory para Dolibarr
      ansible.builtin.command:
        cmd: git config --global --add safe.directory /home/{{ superadmin }}/wwwroot/dolibarr
    - name: Clonando Dolibarr desde {{ dolibarr_git_repo }} en la rama {{ dolibarr_branch }}
      ansible.builtin.git:
        repo: "{{ dolibarr_git_repo }}"
        dest: /home/{{ superadmin }}/wwwroot/dolibarr
        version: "{{ dolibarr_branch }}"
        force: yes
        update: yes
      become_user: "{{ superadmin }}"
      when: dolibarr_git_repo is defined and dolibarr_branch is defined

## Clonando SellYourSaas
    - name: Configurando Git safe directory para SellYourSaas
      ansible.builtin.command:
        cmd: git config --global --add safe.directory /home/{{ superadmin }}/wwwroot/sellyoursaas
    - name: Clonando SellYourSaas desde {{ dolibarr_sellyoursaas_git_repo }}
      ansible.builtin.git:
        repo: "{{ dolibarr_sellyoursaas_git_repo }}"
        dest: /home/{{ superadmin }}/wwwroot/sellyoursaas
        force: yes
        update: yes
      become_user: "{{ superadmin }}"

## Creation of /.conf with credentials
    - name: Creando el archivo /etc/sellyoursaas.conf
      copy:
        dest: "/etc/sellyoursaas.conf"
        content: |
          # File /etc/sellyoursaas.conf

          # Dominio del servicio
          domain= {{ domain }}

          # If deployment server: url of subdomain for user instances
          subdomain={{ subdomain }}.{{ domain }}

          # Set to 1 if this server is the master server and must still have ssh and mysql port open,
          # or 2 if the ssh and mysql access are restricted to ips into /etc/sellyoursaas.d/sellyoursaas-allowed-ip[-ssh|-mysql].conf only
          masterserver=1
          # Set to 1 if this server host instances for the pool (deployment server) and must have ssh and mysql port open,
          # or 2 if the ssh and mysql access are restricted to ips into /etc/sellyoursaas.d/sellyoursaas-allowed-ip[-ssh|-mysql].conf only
          instanceserver=1

          # Set to 1 if this server hosts a dns for the pool (deployment server)
          dnsserver=1

          # Set this to 1 or 0 to archive or not the test instances during undeployment (if 0, test are destroyed with no archive step)
          archivetestinstances=1

          # Set to its own IP if it is a deployment server. Keep empty for master only server.
          ipserverdeployment=ip.of.deployment.server

          # If deployment server: IPs allowed to request a deployment
          allowed_hosts=ip.of.master.server

          # email from
          emailfrom=noreply@mysaasdomainname.com
          # email supervision
          emailsupervision=supervision@mysaasdomainname.com

          # Set location of the master database, ipOfMasterServer or localhost if on master server
          databasehost= {{ databasehost }}
          # Set port of the master database (default is 3306)
          databaseport= {{ databaseport }}
          # Set database name of the master server
          database= {{ database }}
          # Set a credential for an access to the master database (each server can have a different account to access the master database)
          databaseuser={{ databaseuser }}
          databasepass= {{ databasepass }}

          # Option to use a master database on a different server than the master server
          # Set location of the deployment database (default is localhost)
          #databasehostdeployment=localhost
          # Set port of the deployment database (default is 3306)
          #databaseportdeployment=3306
          # Set credential for the deployment database (if different of master database)
          #databaseuserdeployment=sellyoursaas
          #databasepassdeployment=xxxxx

          # Set compress format (gzip or zstd) (zstd need Ubuntu >= 20 or Debian >= 10)
          usecompressformatforarchive=zstd

          # Set this to directory where dolibarr repository is installed
          dolibarrdir=/home/admin/wwwroot/dolibarr
          # Set directory where instances are stored (default is /home/jail/home)
          targetdir=/home/jail/home

          # Set directory where backup are stored
          backupdir=/mnt/diskbackup/backup
          # Set directory where archives of tests instances are stored
          archivedirtest=/mnt/diskbackup/archives-test
          # Set directory where archives of paid instances are stored
          archivedirpaid=/mnt/diskbackup/archives-paid

          # Set option to exclude some tables for some instances in backup
          #backupignoretables=myinstance.withX.mysellyoursaasdomain.com:table1+table2,all:table3+table4,...
          # Set option to use --compression-algorithms=zstd on mysqldump command (required with mysql 8.0.18+)
          #backupcompressionalgorithms=zstd
          # Can set the frequency of rsync
          #backuprsyncdayfrequency=1
          # Can set the frequency of sql dump
          #backupdumpdayfrequency=1

          # Set remote server launcher ip (default is 0.0.0.0)
          remoteserverlistenip=0.0.0.0
          # Set remote server launcher port (default is 8080)
          remoteserverlistenport=8080

          remotebackupserver= {{ remotebackupserver}}
          remotebackupuser= {{ remotebackupuser}}
          remotebackupdir= {{ remotebackupdir}}

          # Option to use different path for dataroot
          #olddoldataroot=/home/admin/wwwroot/dolibarr_documents
          #newdoldataroot=/new/path/of/documents
          # Options to change the directory of vhostfile templates
          #templatesdir=/path/of/vhostfile/templates

          # Options to change the SSL certificates names in Apache virtualhost
          #websslcertificatecrt=with.sellyoursaas.com.crt
          #websslcertificatekey=with.sellyoursaas.com.key
          #websslcertificateintermediate=with.sellyoursaas.com-intermediate.crt

          # Options for Jailkit
          #chrootdir=/home/jail/chroot
          #privatejailtemplatename=privatejail
          #commonjailtemplatename=commonjail
        owner: root
        group: '{{ superadmin }}'
        mode: '0730'
    - name: Creando el /etc/sellyoursaas-public.conf
      copy:
        dest: "/etc/sellyoursaas-public.conf"
        content: |
          # File /etc/sellyoursaas-public.conf

          # Options for antispam system
          maxemailperday=50
          maxemailperdaypaid=500

          # Option to use a different path for spam (for public script)
          #pathtospamdir=/tmp/spam
        owner: root
        group: '{{ superadmin }}'
        mode: '0730'
    - name: Creando el directorio /etc/sellyoursaas.d
      ansible.builtin.file:
        path: /etc/sellyoursaas.d
        state: directory

## Habilitando los módulos de Apache
    - name: Habilitando los módulos de Apache
      ansible.builtin.command:
        cmd: a2enmod actions alias asis auth_basic auth_digest authn_anon authn_dbd authn_dbm authn_file authz_dbm authz_groupfile authz_host authz_owner authz_user autoindex cache cgid cgi charset_lite dav_fs dav dav_lock dbd deflate dir dump_io env expires ext_filter file_cache filter headers http2 ident include info ldap mime mime_magic negotiation reqtimeout rewrite setenvif speling ssl status substitute suexec unique_id userdir usertrack vhost_alias mpm_itk mpm_prefork
      failed_when: false
## Deshabilitando los módulos de Apache que no son necesarios
    - name: Deshabilitando los módulos de Apache que no son necesarios
      ansible.builtin.command:
        cmd: a2dismod mcrypt auth_digest authn_anon asis suexec userdir usertrack authn_dbd dbd ident mime_magic speling
      failed_when: false
## Habilitando las configuraciones de Apache para que funcionen con MPM_PERFORK y MPM_ITK
    - name: Habilitando las configuraciones de Apache para que funcionen con MPM_PERFORK y MPM_ITK
      ansible.builtin.command:
        cmd: a2enconf charset localized-error-pages other-vhosts-access-log security 
      failed_when: false
## Creación del virtual Host de Apache {{ AdminServerName }}.conf
    - name: Creando el Virtual Host de Apache /etc/apache2/sites-available/{{ AdminServerName }}.conf
      copy:
        dest: "/etc/apache2/sites-available/{{ AdminServerName }}.conf"
        content: |
          ##########################
          # Admin Dolibarr Master
          ##########################
          <VirtualHost *:80>
            #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i"
            #php_admin_value mail.force_extra_parameters "-f postmaster@mysaasdomainname.com"
            #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i -f webmaster@mysaasdomainname.com"
            php_admin_value open_basedir /tmp/:/home/admin/wwwroot/:/usr/share/GeoIP:/home/jail/home

            ServerName    {{ ServerName }}
            DocumentRoot /home/admin/wwwroot/dolibarr/htdocs/
            ErrorLog     /home/admin/logs/mycompany_admin_error_log
            CustomLog    /home/admin/logs/mycompany_admin_access_log combined

            UseCanonicalName Off

            # Not sure this can help
            TimeOut 20

            KeepAlive On
            KeepAliveTimeout 5
            MaxKeepAliveRequests 100

            <Directory /home/admin/wwwroot/dolibarr/htdocs/>
              #AuthType Basic
              #AuthName "Authenticate to backoffice"
              #AuthUserFile /etc/apache2/.htpasswd
              #Require valid-user
              # Or if you prefer restrict to some ip, you can add lines "Require ip x.y.z.w" into a .conf file into this directory:
              IncludeOptional /etc/sellyoursaas.d/*-allowed-ip.conf
            </Directory>

            #leaving /public, /api and /dav accessible to everyone
            <Directory /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/public/>
              AuthType None
              Require all granted
              Satisfy any
            </Directory>
            <Directory /home/admin/wwwroot/dolibarr/htdocs/public/>
              AuthType None
              Require all granted
              Satisfy any
            </Directory>
            <Directory /home/admin/wwwroot/dolibarr/htdocs/api/>
              AuthType None
              Require all granted
              Satisfy any
            </Directory>
            <Directory /home/admin/wwwroot/dolibarr/htdocs/dav/>
              AuthType None
              Require all granted
              Satisfy any
            </Directory>
            <Files ~ "(document\.php|viewimage\.php|\.js\.php|\.js|\.css\.php|\.css|\.gif|\.png|\.svg|\.woff2|favicon\.ico)$">
              AuthType None
              Require all granted
              Satisfy any
            </Files>

            <Directory /home/admin/wwwroot>
              AllowOverride FileInfo Limit
              Options +FollowSymLinks
              Order allow,deny
              Deny from env=bad_bots
              Allow from all
              Require all granted
            </Directory>

            # Add alias git on sellyoursaas git dir
            Alias "/git" "/home/admin/wwwroot/dolibarr_documents/sellyoursaas/git"
            <Directory /home/admin/wwwroot/dolibarr_documents/sellyoursaas/git>
              AllowOverride FileInfo Limit
              Options +Indexes
              Order allow,deny
              ## Require ip 1.2.3.4
            </Directory>

            ExpiresActive On
            ExpiresByType image/x-icon A2592000
            ExpiresByType image/gif A2592000
            ExpiresByType image/png A2592000
            ExpiresByType image/jpeg A2592000
            ExpiresByType text/css A2592000
            ExpiresByType text/javascript A2592000
            ExpiresByType application/x-javascript A2592000
            ExpiresByType application/javascript A2592000
          </VirtualHost>
        owner: root
        group: root
        mode: '0644'
    - name: Habilitando el Virtual Host de Apache {{ AdminServerName }}.conf
      ansible.builtin.command:
        cmd: a2ensite {{ AdminServerName }}.conf
      failed_when: false
    - name: Creando el Virtual Host de Apache /etc/apache2/sites-available/{{ MyAccountServerName }}.conf
      copy:
        dest: "/etc/apache2/sites-available/{{ MyAccountServerName }}.conf"
        content: |
          #########################
          # MyAccount Master
          #########################

          <VirtualHost *:80>
            #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i"
            #php_admin_value mail.force_extra_parameters "-f postmaster@mysaasdomainname.com"
            #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i -f postmaster@mysaasdomainname.com"
            php_admin_value open_basedir /tmp/:/home/admin/wwwroot/:/usr/share/GeoIP:/home/admin/tools/

            UseCanonicalName On
            ServerName   {{ MyAccountServerName }}
            ErrorLog     /home/admin/logs/{{ domain }}_myaccount_error_log
            CustomLog    /home/admin/logs/{{ domain }}_myaccount_access_log combined

            DocumentRoot /home/admin/wwwroot/dolibarr_sellyoursaas/myaccount

            # To access files of myaccount
            <Directory /home/admin/wwwroot/dolibarr_sellyoursaas/myaccount>
            AllowOverride FileInfo Options
            Options       -Indexes -MultiViews +FollowSymLinks -ExecCGI
            Require all granted
            </Directory>

            # To access images
            <Directory /home/admin/wwwroot/dolibarr_documents>
            AllowOverride FileInfo Options
            Options       -Indexes -MultiViews +FollowSymLinks -ExecCGI
            Require all granted
            </Directory>

            AddOutputFilterByType DEFLATE text/html text/plain text/xml
            AddDefaultCharset utf-8

            #ExpiresActive On
            #ExpiresByType image/x-icon A2592000
            #ExpiresByType image/gif A2592000
            #ExpiresByType image/png A2592000
            #ExpiresByType image/jpeg A2592000
            #ExpiresByType text/css A2592000
            #ExpiresByType text/javascript A2592000
            #ExpiresByType application/x-javascript A2592000
            #ExpiresByType application/javascript A2592000

          #RewriteEngine On
          #RewriteRule !^/maintenance.php https://%{SERVER_NAME}/maintenance.php?instance=myaccount [R,L]

          RewriteEngine on
          RewriteCond %{SERVER_NAME} =myaccount.mysaasdomainname.com
          RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
          </VirtualHost>
        owner: root
        group: root
        mode: '0644'
    - name: Habilitando el Virtual Host de Apache {{ MyAccountServerName }}.conf
      ansible.builtin.command:
        cmd: a2ensite {{ MyAccountServerName }}.conf
      failed_when: false
    - name: Verificando la configuración de Apache
      ansible.builtin.command:
        cmd: apache2ctl configtest
      register: apache_config_test
      failed_when: false
    - name: Mostrando resultado del test de configuración
      debug:
        var: apache_config_test.stdout_lines
    - name: Reiniciando Apache para aplicar cambios
      service:
        name: apache2
        state: restarted
      when: apache_config_test.rc == 0

## Reiniciando servicios
    - name: Reiniciando servicios
      debug:
        msg: "Reiniciando servicios"
    - name: Reiniciar SSH
      service:
        name: ssh
        state: restarted

## Comprobaciones
# cat /proc/sys/vm/vfs_cache_pressure debería mostrar 50
# Para probar una configuración ssh,  ejecutar sshd -T -C user=logintotest -C host=clienthost -C addr=clientaddr